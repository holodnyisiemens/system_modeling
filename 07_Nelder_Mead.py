'''–ú–µ—Ç–æ–¥ –ù–µ–ª–¥–µ—Ä–∞-–ú–∏–¥–∞, —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–∫ –º–µ—Ç–æ–¥ –¥–µ—Ñ–æ—Ä–º–∏—Ä—É–µ–º–æ–≥–æ 
–º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω–∏–∫–∞ –∏ —Å–∏–º–ø–ª–µ–∫—Å-–º–µ—Ç–æ–¥, ‚Äî –º–µ—Ç–æ–¥ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 
—Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π (—Ç–æ—á–Ω–µ–µ 
‚Äî –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤) —Ñ—É–Ω–∫—Ü–∏–∏, –∞ –ø–æ—ç—Ç–æ–º—É –ª–µ–≥–∫–æ –ø—Ä–∏–º–µ–Ω–∏–º –∫ –Ω–µ–≥–ª–∞–¥–∫–∏–º –∏/–∏–ª–∏ 
–∑–∞—à—É–º–ª—ë–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º. –°—É—Ç—å –º–µ—Ç–æ–¥–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º 
–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏ –¥–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∏–º–ø–ª–µ–∫—Å–∞ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏ —ç–∫—Å—Ç—Ä–µ–º—É–º–∞. –ú–µ—Ç–æ–¥ 
–Ω–∞—Ö–æ–¥–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–º—É–º –∏ –º–æ–∂–µ—Ç ¬´–∑–∞—Å—Ç—Ä—è—Ç—å¬ª –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∏—Ö. –ï—Å–ª–∏ –≤—Å—ë –∂–µ 
—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫—Å—Ç—Ä–µ–º—É–º, –º–æ–∂–Ω–æ –ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π 
–Ω–∞—á–∞–ª—å–Ω—ã–π —Å–∏–º–ø–ª–µ–∫—Å.'''

import random
import pandas as pd
import numpy as np

# –∏—Å—Ö–æ–¥–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
def func(x, z):
    # –æ—Ç–±—Ä–æ—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏
    return np.sin(z % (2 * np.pi)) + np.exp(-x)

# FIXME –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
# —Å–∏–º–ø–ª–µ–∫—Å - —Ñ–∏–≥—É—Ä–∞ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏, –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è
class Simplex:
    def __init__(self, p1, p2, p3, p4) -> None:
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
        self.p4 = p4

    # –∫–æ—Ä—Ç–µ–∂ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ç–æ—á–∫–∞—Ö
    def get_func_vals(self) -> tuple:
        return (
            func(self.p1[0], self.p1[2]),
            func(self.p2[0], self.p2[2]), 
            func(self.p3[0], self.p3[2]),
            func(self.p4[0], self.p4[2])
        )

    # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏–∑ —Ç–æ—á–µ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–∫–Ω—Ü–∏–∏ y(x, z) –≤ –Ω–∏—Ö
    def get_points_and_func_vals(self) -> list:
        return list(zip((self.p1, self.p2, self.p3, self.p4), self.get_func_vals()))

    def get_variance(self) -> float:
        # –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ —Å–∏–º–ø–ª–µ–∫—Å–∞
        avg_point = np.empty(shape=(3, ))
        avg_point = (self.p1 + self.p2 + self.p3 + self.p4) / 4

        # FIXME
        # —Å—É–º–º–∞ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –æ—Ç –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ —Å–∏–º–ø–ª–µ–∫—Å–∞ –¥–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        sum_of_squares = (
            (self.p1[0] - avg_point[0]) ** 2 + (self.p1[1] - avg_point[1]) ** 2 + (self.p1[2] - avg_point[2]) ** 2 +
            (self.p2[0] - avg_point[0]) ** 2 + (self.p2[1] - avg_point[1]) ** 2 + (self.p2[2] - avg_point[2]) ** 2 +
            (self.p3[0] - avg_point[0]) ** 2 + (self.p3[1] - avg_point[1]) ** 2 + (self.p3[2] - avg_point[2]) ** 2 +
            (self.p4[0] - avg_point[0]) ** 2 + (self.p4[1] - avg_point[1]) ** 2 + (self.p4[2] - avg_point[2]) ** 2
        )

        # –¥–∏—Å–ø–µ—Ä—Å–∏—è
        my_variance = sum_of_squares / 4
        # print('my:', my_variance)


        points = np.array((self.p1, self.p2, self.p3, self.p4))
        # print(points)
        variance_x = np.var(points[:, 0])
        variance_y = np.var(points[:, 1])
        variance_z = np.var(points[:, 2])
        total_variance = np.var(points)

        variance = total_variance
        # print('np:', variance)

        return my_variance

'''–®–ê–ì 1: –í–Ω–∞—á–∞–ª–µ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è n+1 —Ç–æ—á–∫–∞ ùë• = (ùë•(1), ùë•(2), ‚Ä¶ , ùë•(ùëõ)), 
ùëñ = 1 ‚Ä¶ ùëõ + 1, –æ–±—Ä–∞–∑—É—é—â–∏–µ —Å–∏–º–ø–ª–µ–∫—Å n-–º–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞. 
–í —ç—Ç–∏—Ö —Ç–æ—á–∫–∞—Ö –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏: ùëì1 = ùëì(ùë•1), ùëì2 = ùëì(ùë•2), ‚Ä¶ , ùëìùëõ = ùëì(ùë•ùëõ)'''
def preparing(x_start: float, z_start: float, simplex_step: float) -> Simplex:
    y_start = func(x_start, z_start)
    # —Ç.–∫. —Ç–æ—á–∫–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ 3-–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 4 —Ç–æ—á–∫–∏ –¥–ª—è —Å–∏–º–ø–ª–µ–∫—Å–∞ (—Ç–µ—Ç—Ä–∞–µ–¥—Ä)
    # —Ç–æ—á–∫–∏ —Å–∏–º–ø–ª–µ–∫—Å–∞ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è —Å —à–∞–≥–æ–º simplex_step –æ—Ç–Ω–æ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–æ—á–∫–∏
    center = np.array((x_start, y_start, z_start))
    p1 = np.array((center[0], center[1], center[2] + simplex_step))
    p2 = np.array((center[0], center[1] + simplex_step, center[2] - simplex_step))
    p3 = np.array((center[0] - simplex_step, center[1] - simplex_step, center[2] - simplex_step))
    p4 = np.array((center[0] + simplex_step, center[1] - simplex_step, center[2] - simplex_step))

    return Simplex(p1, p2, p3, p4)

'''–®–ê–ì 2: –ò–∑ –≤–µ—Ä—à–∏–Ω —Å–∏–º–ø–ª–µ–∫—Å–∞ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è: —Ç–æ—á–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º (–∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö) –∑–Ω–∞—á–µ–Ω–∏–µ–º
—Ñ—É–Ω–∫—Ü–∏–∏, —Ç–æ—á–∫–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–æ—á–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏. 
–¶–µ–ª—å—é –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π –±—É–¥–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–∫–Ω—Ü–∏–∏.'''
def sorting(points_and_func_vals: list) -> list:
    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–µ–π —Ç–æ—á–µ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏
    # 3-–π –∏–Ω–¥–µ–∫—Å: —Ç–æ—á–∫–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    # 2-–π –∏–Ω–¥–µ–∫—Å: —Ç–æ—á–∫–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º
    # 0-–π –∏–Ω–¥–µ–∫—Å: —Ç–æ—á–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –∏—Å–∫–æ–º—ã—Ö —Ç–æ—á–µ–∫ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–º –∑–Ω–∞—á–µ–Ω–∏–π
    sorted_points_and_func_vals = sorted(points_and_func_vals, key=lambda x: x[1])
    return sorted_points_and_func_vals

'''–®–ê–ì 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Ç—è–∂–µ—Å—Ç–∏ –≤—Å–µ—Ö —Ç–æ—á–µ–∫, –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏, —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
–¶–µ–Ω—Ç—Ä —Ç—è–∂–µ—Å—Ç–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–≤–Ω—ã —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º —Å—É–º–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'''
def get_gravity_center(sorted_points_and_func_vals):
    # –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä
    xc = np.array((0., 0., 0.))
    # –≤—Å–µ —Ç–æ—á–∫–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏)
    for p, _ in sorted_points_and_func_vals[:3]:
        xc += 1/3 * p
    return xc

'''–®–ê–ì 4: –û—Ç—Ä–∞–∂–µ–Ω–∏–µ. –û—Ç—Ä–∞–∑–∏–º —Ç–æ—á–∫—É —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ —Ç—è–∂–µ—Å—Ç–∏
—Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ùõº (–ø—Ä–∏ ùõº = 1 —ç—Ç–æ –±—É–¥–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è, –≤ –æ–±—â–µ–º —Å–ª—É—á–∞–µ ‚Äî –≥–æ–º–æ—Ç–µ—Ç–∏—è), 
–∏ –≤ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ç–æ—á–∫–µ –≤—ã—á–∏—Å–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é'''
def reflection(xc, xh, a=1) -> tuple:
    # –æ—Ç—Ä–∞–∂–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞
    xr = np.empty(shape=xc.shape)
    xr = (1 + a) * xc - a * xh

    # –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∏—Å–∫–æ–º–æ–π —Ç–æ—á–∫–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–µ–π
    return xr, func(xr[0], xr[2])

'''–®–ê–ì 6: –°–∂–∞—Ç–∏–µ'''
def compression(xc, xh, b=0.5) -> tuple:
    xs = np.empty(shape=xc.shape)
    xs = (1 - b) * xc + b * xh
    return xs, func(xs[0], xs[2])

'''–®–ê–ì 5: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ fr –≤ —Ä—è–¥—É fh, fg –∏ fl'''
def define_refl_val_place(xc, xr, fr: float, xh, fh: float, fg: float, fl: float, gamma: float = 2) -> tuple:
    # —Ñ–ª–∞–≥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    continue_iter = True
    if fr <= fl:
        # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ —É–¥–∞—á–Ω–æ–µ –∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–≤–µ–ª–∏—á–∏—Ç—å —à–∞–≥ (—Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ)
        xe = np.empty(shape=xc.shape)
        xe = (1 - gamma) * xc + gamma * xr
        fe = func(xe[0], xe[2])

        if fe <= fr:
            # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–∏–º–ø–ª–µ–∫—Å –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏
            xh = xe
        elif fr < fe:
            # –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
            xh = xr

        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 9 —à–∞–≥)
        continue_iter = False
    elif fl < fr < fg:
        # –Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ –ª—É—á—à–µ –¥–≤—É—Ö –ø—Ä–µ–∂–Ω–∏—Ö
        xh = xr
        # –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 9 —à–∞–≥)
        continue_iter = False
    elif fg <= fr < fh:
        # –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è ùë•ùëü —Å ùë•‚Ñé, ùëìùëü —Å ùëì‚Ñé
        # –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–µ–¥–µ–ª –Ω–µ –≤–∫–ª—é—á–µ–Ω, —Ç.–∫. –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–≤–Ω—ã, –º–µ–Ω—è—Ç—å –∏—Ö –º–µ—Å—Ç–∞–º–∏ –Ω–µ –±—É–¥–µ—Ç —Å–º—ã—Å–ª–∞ 
        xr, xh = xh, xr
    
    # –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö fh <= fr

    fr = func(xr[0], xr[2])
    fh = func(xh[0], xh[2])
    return xr, fr, xh, fh, continue_iter

# –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
def nelder_mead_optimize(x_start: float = None, z_start: float = None, simplex_step: float = None, sorted_p_and_f: list = None, acc: float = None) -> tuple[float, float]:
    try:
        # –∫–∞–∂–¥–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —à–∞–≥–∞ 2
        if not sorted_p_and_f:
            # –®–ê–ì 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            simplex = preparing(x_start, z_start, simplex_step)
            # –®–ê–ì 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sorted_p_and_f = sorting(simplex.get_points_and_func_vals())
        else:
            # —Ç–æ—á–∫–∞ —Å–∏–º–ø–ª–µ–∫—Å–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–µ–π
            # –®–ê–ì 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            sorted_p_and_f = sorting(sorted_p_and_f)

        # —Ç–æ—á–∫–∞ —Å–∏–º–ø–ª–µ–∫—Å–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–µ–π
        xh, fh = sorted_p_and_f[3]
        # —Å–æ –≤—Ç–æ—Ä—ã–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ
        xg, fg = sorted_p_and_f[2]
        # —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º
        xl, fl = sorted_p_and_f[0]

        # –®–ê–ì 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
        xc = get_gravity_center(sorted_p_and_f)

        # –®–ê–ì 4: –û—Ç—Ä–∞–∂–µ–Ω–∏–µ
        xr, fr = reflection(xc, xh, a=1)

        # –®–ê–ì 5
        xr, fr, xh, fh, continue_iter = define_refl_val_place(xc, xr, fr, xh, fh, fg, fl)

        # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        sorted_p_and_f[3] = xh, fh
        sorted_p_and_f[2] = xg, fg
        sorted_p_and_f[0] = xl, fl

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 7 –∏ 8 —à–∞–≥–∞
        if continue_iter:
            # –®–ê–ì 6: –°–∂–∞—Ç–∏–µ
            xs, fs = compression(xc, xh)

            # –®–ê–ì 7
            if fs <= fh:
                xh = xs
                fh = fs
                sorted_p_and_f[3] = xh, fh

            # –®–ê–ì 8
            else:
                # fs > fh, –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å —Å–∞–º—ã–º–∏ —É–¥–∞—á–Ω—ã–º–∏
                # –¥–µ–ª–∞–µ–º ¬´–≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ¬ª —Å–∏–º–ø–ª–µ–∫—Å–∞ ‚Äî –≥–æ–º–æ—Ç–µ—Ç–∏—é –∫ —Ç–æ—á–∫–µ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                for i in range(1, len(sorted_p_and_f)):
                    p, _ = sorted_p_and_f[i]
                    p = (p + xl) / 2
                    sorted_p_and_f[i] = (p, func(p[0], p[2]))

        # –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–ª–µ–∫—Å–∞ (–∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–∏)
        p1, p2, p3, p4 = (p[0] for p in sorted_p_and_f[:4])
        simplex = Simplex(p1, p2, p3, p4)

        # –®–ê–ì 9: —É—Å–ª–æ–≤–∏–µ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω —Å–∏–º–ø–ª–µ–∫—Å–∞ —á–µ—Ä–µ–∑ –¥–∏—Å–ø–µ—Ä—Å–∏—é, —á—Ç–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –∏ –±–ª–∏–∑–æ—Å—Ç—å –∏—Ö –∫ –∏—Å–∫–æ–º–æ–º—É –º–∏–Ω–∏–º—É–º—É)
        if acc and (simplex.get_variance() < acc):
            return sorted_p_and_f[0][0][0], sorted_p_and_f[0][0][2]

        return nelder_mead_optimize(sorted_p_and_f=sorted_p_and_f, acc=acc)

    except RecursionError:
        # –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ —Ä–µ–∫—É—Ä—Å–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–µ–∫—É—â–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return sorted_p_and_f[0][0][0], sorted_p_and_f[0][0][2]

# 30 —Ç–µ—Å—Ç–æ–≤ 
x_data = np.random.randint(-1000, 1000, size=30)
z_data = np.random.randint(-1000, 1000, size=30)

# —Ç–æ—á–Ω–æ—Å—Ç—å –∏ —à–∞–≥ –æ—Ç—Å—Ç—É–ø–∞ –æ—Ç —Ç–æ—á–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–∏–º–ø–ª–µ–∫—Å–∞ –≤–æ–∫—Ä—É–≥ –Ω–µ–µ
acc = 0.00000001
simplex_step = 0.01

# —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
data = []

for x_start, z_start in zip(x_data, z_data):
    # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    y_start = func(x_start, z_start)

    # –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    opt_x, opt_z = nelder_mead_optimize(x_start=x_start, z_start=z_start, simplex_step=simplex_step, acc=acc)
    opt_y = func(opt_x, opt_z)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (-1)
    if opt_y < -0.9 and opt_y < y_start:
        test_res = 'PASS'
    else:
        test_res = 'FAIL'

    # —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (–¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏  –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π y –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ 4—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
    data.append((x_start, z_start, y_start, opt_x, opt_z, round(opt_y, 4), test_res))

pd.options.display.float_format = lambda num: 'inf' if num > 1e6 else '{:.3f}'.format(num)
table = pd.DataFrame(data, columns=['x_start', 'z_start', 'y_start', 'opt_x', 'opt_z', 'opt_y', 'test_res'])
print(table)

# –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
print('PASSED:', len(table[table['test_res']=='PASS']))
